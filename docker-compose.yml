version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: restaurant-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: restaurant-reservations
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - restaurant-network

  # Backend API Service
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: restaurant-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/restaurant-reservations?authSource=admin
      MONGODB_DB_NAME: restaurant-reservations
      JWT_SECRET: your-super-secret-jwt-key-for-development-only
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
    ports:
      - "4000:4000"
    depends_on:
      - mongodb
    volumes:
      - ./packages/backend:/app
      - /app/node_modules
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    container_name: restaurant-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:4000
      VITE_GRAPHQL_URL: http://localhost:4000/graphql
      VITE_NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./packages/frontend:/app
      - /app/node_modules
    networks:
      - restaurant-network

  # Redis (for future caching and sessions)
  redis:
    image: redis:7.2-alpine
    container_name: restaurant-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - restaurant-network
    command: redis-server --appendonly yes

  # MongoDB Express (Database Admin UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: restaurant-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - restaurant-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  restaurant-network:
    driver: bridge
